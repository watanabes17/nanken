{
  "version": 3,
  "sources": ["../src/vrm/lookat.ts", "../src/vrm/blendshape.ts", "../src/vrm/firstperson.ts", "../src/vrm/avatar.ts", "../src/utils/physics-cannon.ts", "../src/utils/simpleik.ts", "../src/utils/vmd.ts", "../src/utils/bvh.ts", "../src/aframe-vrm.js"],
  "sourcesContent": ["export class VRMLookAt implements VRMModule {\n    public target: THREE.Object3D | null = null;\n    public angleLimit: number = 60 * Math.PI / 180;\n    private readonly _bone: THREE.Object3D;\n    private readonly _identQ = new THREE.Quaternion();\n    private readonly _zV = new THREE.Vector3(0, 0, -1);\n    private readonly _tmpQ0 = new THREE.Quaternion();\n    private readonly _tmpV0 = new THREE.Vector3();\n\n    constructor(initCtx: InitCtx) {\n        this._bone = initCtx.nodes[initCtx.vrm.firstPerson.firstPersonBone];\n    }\n\n    public update(t: number): void {\n        let target = this.target;\n        let bone = this._bone;\n        if (target == null || bone == null) {\n            return;\n        }\n        let targetDirection = bone.worldToLocal(this._tmpV0.setFromMatrixPosition(target.matrixWorld)).normalize();\n        let rot = this._tmpQ0.setFromUnitVectors(this._zV, targetDirection);\n        let boneLimit = this.angleLimit;\n        let speedFactor = 0.08;\n        let angle = 2 * Math.acos(rot.w);\n        if (angle > boneLimit * 1.5) {\n            rot = this._identQ;\n            speedFactor = 0.04;\n        } else if (angle > boneLimit) {\n            rot.setFromAxisAngle(this._tmpV0.set(rot.x, rot.y, rot.z).normalize(), boneLimit);\n        }\n        bone.quaternion.slerp(rot, speedFactor);\n    }\n}\n", "import { VRMAvatar } from \"./avatar\" // TODO: remove circular dependency\n\nexport class VRMBlendShapeUtil {\n    private readonly _avatar: VRMAvatar;\n    private _currentShape: any = {};\n    private animatedMorph: any;\n    private morphAction: any;\n\n    constructor(avatar: VRMAvatar) {\n        this._avatar = avatar;\n    }\n\n    public setBlendShapeWeight(name: string, value: number): void {\n        this._currentShape[name] = value;\n        if (value == 0) {\n            delete this._currentShape[name];\n        }\n        this._updateBlendShape()\n    }\n\n    public getBlendShapeWeight(name: string): number {\n        return this._currentShape[name] || 0;\n    }\n\n    public resetBlendShape() {\n        this._currentShape = {};\n        this._updateBlendShape();\n    }\n\n    public startBlink(blinkInterval: number): void {\n        if (this.animatedMorph) {\n            return;\n        }\n        this.animatedMorph = {\n            name: 'BLINK',\n            times: [0, blinkInterval - 0.2, blinkInterval - 0.1, blinkInterval],\n            values: [0, 0, 1, 0]\n        };\n        this._updateBlendShape();\n    }\n\n    public stopBlink(): void {\n        this.animatedMorph = null;\n        this._updateBlendShape();\n    }\n\n    private _updateBlendShape(): void {\n        // TODO: refactoring. use THREE.AnimationBlendMode.\n        let addWeights = (data: Record<string, any>, name: string, weights: number[]) => {\n            let blend = this._avatar.blendShapes[name];\n            blend && blend.binds.forEach(bind => {\n                let tname = bind.target.name;\n                let values = data[tname] || (data[tname] = new Array(bind.target.morphTargetInfluences.length * weights.length).fill(0));\n                for (let t = 0; t < weights.length; t++) {\n                    let i = t * bind.target.morphTargetInfluences.length + bind.index;\n                    values[i] += Math.max(bind.weight * weights[t], values[i]); // blend func : max\n                }\n            });\n        };\n        let times = [0], trackdata: Record<string, any[]> = {};\n        if (this.animatedMorph) {\n            times = this.animatedMorph.times;\n            addWeights(trackdata, this.animatedMorph.name, this.animatedMorph.values);\n        }\n        for (let [name, value] of Object.entries(this._currentShape)) {\n            if (this._avatar.blendShapes[name]) {\n                addWeights(trackdata, name, new Array(times.length).fill(value));\n            }\n        }\n        let tracks = Object.entries(trackdata).map(([tname, values]) =>\n            new THREE.NumberKeyframeTrack(tname + '.morphTargetInfluences', times, values));\n        let nextAction = null;\n        if (tracks.length > 0) {\n            let clip = new THREE.AnimationClip('morph', undefined, tracks);\n            nextAction = this._avatar.mixer.clipAction(clip).setEffectiveWeight(1.0).play();\n        }\n        this.morphAction && this.morphAction.stop();\n        this.morphAction = nextAction;\n    }\n}\n", "\nexport class FirstPersonMeshUtil {\n    private readonly _firstPersonBone: THREE.Bone;\n    private readonly _annotatedMeshes: { flag: string, mesh: THREE.SkinnedMesh }[]\n    constructor(initCtx: InitCtx) {\n        this._firstPersonBone = initCtx.nodes[initCtx.vrm.firstPerson.firstPersonBone] as THREE.Bone;\n        this._annotatedMeshes =\n            initCtx.vrm.firstPerson.meshAnnotations.map(ma => ({ flag: ma.firstPersonFlag, mesh: initCtx.meshes[ma.mesh] }));\n    }\n    public setFirstPerson(firstPerson: boolean): void {\n        this._annotatedMeshes.forEach(a => {\n            if (a.flag == 'ThirdPersonOnly') {\n                a.mesh.visible = !firstPerson;\n            } else if (a.flag == 'FirstPersonOnly') {\n                a.mesh.visible = firstPerson;\n            } else if (a.flag == 'Auto' && this._firstPersonBone) {\n                if (firstPerson) {\n                    this._genFirstPersonMesh(a.mesh);\n                } else {\n                    this._resetFirstPersonMesh(a.mesh);\n                }\n            }\n        });\n    }\n    private _genFirstPersonMesh(mesh: THREE.SkinnedMesh): void {\n        mesh.children.forEach(c => this._genFirstPersonMesh(c as THREE.SkinnedMesh));\n        if (!mesh.isSkinnedMesh) {\n            return;\n        }\n        let firstPersonBones: Record<string, boolean> = {};\n        this._firstPersonBone.traverse(b => {\n            firstPersonBones[b.uuid] = true;\n        });\n        let skeletonBones = mesh.skeleton.bones;\n        let skinIndex = mesh.geometry.attributes.skinIndex;\n        let skinWeight = mesh.geometry.attributes.skinWeight;\n        let index = mesh.geometry.index!;\n        let vertexErase = [];\n        let vcount = 0, fcount = 0;\n        for (let i = 0; i < skinIndex.array.length; i++) {\n            let b = skinIndex.array[i];\n            if (skinWeight.array[i] > 0 && firstPersonBones[skeletonBones[b].uuid]) {\n                if (!vertexErase[i / skinIndex.itemSize | 0]) {\n                    vcount++;\n                    vertexErase[i / skinIndex.itemSize | 0] = true;\n                }\n            }\n        }\n        let trinagleErase = [];\n        for (let i = 0; i < index.count; i++) {\n            if (vertexErase[index.array[i]] && !trinagleErase[i / 3 | 0]) {\n                trinagleErase[i / 3 | 0] = true;\n                fcount++;\n            }\n        }\n        if (fcount == 0) {\n            return;\n        } else if (fcount * 3 == index.count) {\n            mesh.visible = false;\n            return;\n        }\n        // TODO: erase triangle.\n    }\n    private _resetFirstPersonMesh(mesh: THREE.SkinnedMesh): void {\n        mesh.children.forEach(c => this._resetFirstPersonMesh(c as THREE.SkinnedMesh));\n        mesh.visible = true;\n    }\n}\n", "import { VRMLookAt } from \"./lookat\"\nimport { VRMBlendShapeUtil } from \"./blendshape\"\nimport { FirstPersonMeshUtil } from \"./firstperson\"\nimport { GLTFLoader, GLTF } from \"three/examples/jsm/loaders/GLTFLoader\" // type only\n\nexport type PoseData = { bones: any[], blendShape?: any[] }\nexport class VRMLoader {\n    private readonly gltfLoader: GLTFLoader;\n    constructor(gltfLoader?: any) {\n        // @ts-ignore\n        this.gltfLoader = gltfLoader || new THREE.GLTFLoader(THREE.DefaultLoadingManager);\n    }\n    public async load(url: string, moduleSpecs: ModuleSpec[] = []): Promise<VRMAvatar> {\n        return new Promise((resolve, reject) => {\n            this.gltfLoader.load(url, async (gltf) => {\n                resolve(await new VRMAvatar(gltf).init(gltf, moduleSpecs));\n            }, undefined, reject);\n        });\n    }\n}\n\nexport class VRMAvatar {\n    public readonly model: THREE.Object3D & { skeleton?: THREE.Skeleton };\n    public readonly mixer: THREE.AnimationMixer;\n    public readonly bones: Record<string, THREE.Bone> = {};\n    public blendShapes: Record<string, { name: string, binds: Record<string, any>[] }> = {};\n    public readonly modules: Record<string, VRMModule> = {};\n    public meta: Record<string, any> = {};\n    public readonly isVRM: boolean;\n    public readonly animations: THREE.AnimationClip[];\n    public firstPersonBone: THREE.Bone | null = null;\n\n    private _firstPersonMeshUtil: FirstPersonMeshUtil | null = null;\n    private _blendShapeUtil: VRMBlendShapeUtil;\n\n    // TODO: move to another component.\n    public boneConstraints = {\n        'head': { type: 'ball', limit: 60 * Math.PI / 180, twistAxis: new THREE.Vector3(0, 1, 0), twistLimit: 60 * Math.PI / 180 },\n        'neck': { type: 'ball', limit: 30 * Math.PI / 180, twistAxis: new THREE.Vector3(0, 1, 0), twistLimit: 10 * Math.PI / 180 },\n        'leftUpperLeg': { type: 'ball', limit: 170 * Math.PI / 180, twistAxis: new THREE.Vector3(0, -1, 0), twistLimit: Math.PI / 2 },\n        'rightUpperLeg': { type: 'ball', limit: 170 * Math.PI / 180, twistAxis: new THREE.Vector3(0, -1, 0), twistLimit: Math.PI / 2 },\n        'leftLowerLeg': { type: 'hinge', axis: new THREE.Vector3(1, 0, 0), min: -170 * Math.PI / 180, max: 0 * Math.PI / 180 },\n        'rightLowerLeg': { type: 'hinge', axis: new THREE.Vector3(1, 0, 0), min: -170 * Math.PI / 180, max: 0 * Math.PI / 180 }\n    };\n\n    constructor(gltf: GLTF) {\n        this.model = gltf.scene;\n        this.mixer = new THREE.AnimationMixer(this.model);\n        this.isVRM = (gltf.userData.gltfExtensions || {}).VRM != null;\n        this.animations = gltf.animations || [];\n        this._blendShapeUtil = new VRMBlendShapeUtil(this);\n    }\n\n    public async init(gltf: GLTF, moduleSpecs: ModuleSpec[]) {\n        if (!this.isVRM) {\n            return this;\n        }\n        let vrmExt = gltf.userData.gltfExtensions.VRM as VRMExtension;\n        let bones = this.bones;\n        let nodes = await gltf.parser.getDependencies('node');\n        let meshes = await gltf.parser.getDependencies('mesh');\n        let initCtx = { nodes: nodes, meshes: meshes, vrm: vrmExt, gltf: gltf };\n\n        this.meta = vrmExt.meta;\n        Object.values(vrmExt.humanoid.humanBones).forEach((humanBone) => {\n            bones[humanBone.bone] = nodes[humanBone.node];\n        });\n        if (vrmExt.firstPerson) {\n            if (vrmExt.firstPerson.firstPersonBone) {\n                this.firstPersonBone = nodes[vrmExt.firstPerson.firstPersonBone];\n                this.modules.lookat = new VRMLookAt(initCtx);\n            }\n            if (vrmExt.firstPerson.meshAnnotations) {\n                this._firstPersonMeshUtil = new FirstPersonMeshUtil(initCtx);\n            }\n        }\n        this.model.skeleton = new THREE.Skeleton(Object.values(bones));\n        this._fixBoundingBox();\n        if (vrmExt.blendShapeMaster) {\n            this._initBlendShapes(initCtx);\n        }\n\n        for (let spec of moduleSpecs) {\n            let mod = spec.instantiate(this, initCtx);\n            if (mod) {\n                this.modules[spec.name] = mod;\n            }\n        }\n        return this;\n    }\n    private _initBlendShapes(ctx: InitCtx): void {\n        this.blendShapes = (ctx.vrm.blendShapeMaster.blendShapeGroups || []).reduce((blendShapes: Record<string, any>, bg) => {\n            let binds = bg.binds.flatMap(bind => {\n                let meshObj = ctx.meshes[bind.mesh];\n                return (meshObj.isSkinnedMesh ? [meshObj] : meshObj.children.filter(obj => (<THREE.SkinnedMesh>obj).isSkinnedMesh))\n                    .map(obj => ({ target: obj, index: bind.index, weight: bind.weight / 100 }));\n            });\n            blendShapes[(bg.presetName || bg.name).toUpperCase()] = { name: bg.name, binds: binds };\n            return blendShapes;\n        }, {});\n    }\n    private _fixBoundingBox(): void {\n        let bones = this.bones;\n        if (!bones.hips) {\n            return;\n        }\n        // Extends bounding box.\n        let tmpV = new THREE.Vector3();\n        let center = bones.hips.getWorldPosition(tmpV).clone();\n        this.model.traverse((obj) => {\n            let mesh = <THREE.SkinnedMesh>obj;\n            if (mesh.isSkinnedMesh) {\n                let pos = mesh.getWorldPosition(tmpV).sub(center).multiplyScalar(-1);\n                let r = (pos.clone().sub(mesh.geometry.boundingSphere!.center).length() + mesh.geometry.boundingSphere!.radius);\n                mesh.geometry.boundingSphere!.center.copy(pos);\n                mesh.geometry.boundingSphere!.radius = r;\n                mesh.geometry.boundingBox!.min.set(pos.x - r, pos.y - r, pos.z - r);\n                mesh.geometry.boundingBox!.max.set(pos.x + r, pos.y + r, pos.z + r);\n            }\n        });\n    }\n    public update(timeDelta: number): void {\n        this.mixer.update(timeDelta);\n        for (let m of Object.values(this.modules)) {\n            m.update(timeDelta);\n        }\n    }\n    public setModule(name: string, module: VRMModule): void {\n        this.removeModule(name);\n        this.modules[name] = module;\n    }\n    public removeModule(name: string): void {\n        let module = this.modules[name];\n        module && module.dispose && module.dispose();\n        delete this.modules[name];\n    }\n    public dispose(): void {\n        for (let m of Object.keys(this.modules)) {\n            this.removeModule(m);\n        }\n        this.model.traverse((obj) => {\n            let mesh = obj as THREE.Mesh;\n            if (mesh.isMesh) {\n                mesh.geometry.dispose();\n                (mesh.material as THREE.MeshBasicMaterial).map?.dispose();\n            }\n            // @ts-ignore\n            obj.skeleton && obj.skeleton.dispose();\n        });\n    }\n\n    // Util functions.\n    get lookAtTarget(): THREE.Object3D | null {\n        let lookat = this.modules.lookat as VRMLookAt | null;\n        return lookat ? lookat.target : null;\n    }\n    set lookAtTarget(v: THREE.Object3D) {\n        let lookat = this.modules.lookat as VRMLookAt | null;\n        if (lookat) {\n            lookat.target = v;\n        }\n    }\n    public setBlendShapeWeight(name: string, value: number): void {\n        this._blendShapeUtil.setBlendShapeWeight(name, value);\n    }\n    public getBlendShapeWeight(name: string): number {\n        return this._blendShapeUtil.getBlendShapeWeight(name);\n    }\n    public resetBlendShape(): void {\n        this._blendShapeUtil.resetBlendShape();\n    }\n    public startBlink(blinkInterval: number): void {\n        this._blendShapeUtil.startBlink(blinkInterval);\n    }\n    public stopBlink(): void {\n        this._blendShapeUtil.stopBlink();\n    }\n    public getPose(exportMorph: boolean): PoseData {\n        let poseData: PoseData = {\n            bones: Object.keys(this.bones).map((name) =>\n                ({ name: name, q: this.bones[name].quaternion.toArray() })\n            )\n        }\n        if (exportMorph) {\n            poseData.blendShape = Object.keys(this.blendShapes).map((name) =>\n                ({ name: name, value: this.getBlendShapeWeight(name) })\n            );\n        }\n        return poseData\n    }\n    public setPose(pose: PoseData): void {\n        if (pose.bones) {\n            for (let boneParam of pose.bones) {\n                if (this.bones[boneParam.name]) {\n                    this.bones[boneParam.name].quaternion.fromArray(boneParam.q);\n                }\n            }\n        }\n        if (pose.blendShape) {\n            for (let morph of pose.blendShape) {\n                this.setBlendShapeWeight(morph.name, morph.value)\n            }\n        }\n    }\n    public restPose(): void {\n        for (let b of Object.values(this.bones)) {\n            b.quaternion.set(0, 0, 0, 1);\n        }\n    }\n    public setFirstPerson(firstPerson: boolean): void {\n        if (this._firstPersonMeshUtil) {\n            this._firstPersonMeshUtil.setFirstPerson(firstPerson);\n        }\n    }\n}\n", "export class VRMPhysicsCannonJS implements VRMModule {\n    collisionGroup = 2;\n    enable = false;\n    binds: [THREE.Object3D, CANNON.Body][] = [];\n    fixedBinds: [THREE.Object3D, CANNON.Body][] = [];\n    bodies: CANNON.Body[] = [];\n    constraints: any[] = [];\n    private readonly _tmpQ0 = new THREE.Quaternion();\n    private readonly _tmpV0 = new THREE.Vector3();\n    private readonly _tmpV1 = new THREE.Vector3();\n    springBoneSystem: any;\n    world: CANNON.World | null = null;\n    internalWorld: boolean = false;\n    constructor(initctx: InitCtx) {\n        this.springBoneSystem = this._springBoneSystem();\n        this._init(initctx);\n    }\n    private _init(initctx: InitCtx): void {\n        if (!initctx.vrm.secondaryAnimation) {\n            return;\n        }\n        let nodes = initctx.nodes;\n        let secondaryAnimation = initctx.vrm.secondaryAnimation;\n        let allColliderGroupsMask = 0;\n        let colliderMarginFactor = 0.9; // TODO: Remove this.\n        (secondaryAnimation.colliderGroups || []).forEach((cc, i) => {\n            let node = nodes[cc.node];\n            for (let collider of cc.colliders) {\n                let body = new CANNON.Body({ mass: 0, collisionFilterGroup: 1 << (this.collisionGroup + i + 1), collisionFilterMask: -1 });\n                body.addShape(new CANNON.Sphere(collider.radius * colliderMarginFactor), collider.offset);\n                this.bodies.push(body);\n                this.fixedBinds.push([node, body]);\n                allColliderGroupsMask |= body.collisionFilterGroup;\n            }\n        });\n        for (let bg of secondaryAnimation.boneGroups || []) {\n            let gravity = new CANNON.Vec3().copy(bg.gravityDir || { x: 0, y: -1, z: 0 }).scale(bg.gravityPower || 0);\n            let radius = bg.hitRadius || 0.05;\n            let collisionFilterMask = ~(this.collisionGroup | allColliderGroupsMask);\n            for (let g of bg.colliderGroups || []) {\n                collisionFilterMask |= 1 << (this.collisionGroup + g + 1);\n            }\n            for (let b of bg.bones) {\n                let root = new CANNON.Body({ mass: 0, collisionFilterGroup: 0, collisionFilterMask: 0 });\n                root.position.copy(nodes[b].parent.getWorldPosition(this._tmpV0));\n                this.bodies.push(root);\n                this.fixedBinds.push([nodes[b].parent, root]);\n                let add = (parentBody: CANNON.Body, node: THREE.Object3D) => {\n                    let c = node.getWorldPosition(this._tmpV0);\n                    let wpos = c.clone(); // TODO\n                    let n = node.children.length + 1;\n                    if (node.children.length > 0) {\n                        node.children.forEach(n => {\n                            c.add(n.getWorldPosition(this._tmpV1));\n                        });\n                    } else {\n                        c.add(node.parent!.getWorldPosition(this._tmpV1).sub(c).normalize().multiplyScalar(-0.1).add(c));\n                        n = 2;\n                    }\n                    c.multiplyScalar(1 / n);\n\n                    let body = new CANNON.Body({\n                        mass: 0.5,\n                        linearDamping: Math.max(bg.dragForce || 0, 0.0001),\n                        angularDamping: Math.max(bg.dragForce || 0, 0.0001),\n                        collisionFilterGroup: this.collisionGroup,\n                        collisionFilterMask: collisionFilterMask,\n                        position: new CANNON.Vec3().copy(c),\n                    });\n                    body.addShape(new CANNON.Sphere(radius));\n                    this.bodies.push(body);\n\n                    let o = new CANNON.Vec3().copy(this._tmpV1.copy(wpos).sub(c));\n                    let d = new CANNON.Vec3().copy(wpos.sub(parentBody.position));\n                    let joint = new CANNON.PointToPointConstraint(body, o, parentBody, d);\n                    this.constraints.push(joint);\n\n                    let l = body.position.distanceTo(parentBody.position);\n                    this.binds.push([node, body]);\n                    this.springBoneSystem.objects.push({ body: body, parentBody: parentBody, force: gravity, boneGroup: bg, size: radius, distanceToParent: l });\n                    node.children.forEach(n => (n as THREE.Bone).isBone && add(body, n));\n                };\n                add(root, nodes[b]);\n            }\n        }\n    }\n    private _springBoneSystem() {\n        let _q0 = new CANNON.Quaternion();\n        let _q1 = new CANNON.Quaternion();\n        let _v0 = new CANNON.Vec3();\n        return {\n            world: null as CANNON.World | null,\n            objects: [] as any[],\n            update() {\n                let g = this.world!.gravity, dt = this.world!.dt;\n                let avlimit = 0.1;\n                let stiffnessScale = 1600;\n                for (let b of this.objects) {\n                    let body = b.body as CANNON.Body, parent = b.parentBody;\n                    // Cancel world.gravity and apply boneGroup.gravity.\n                    let f = body.force, m = body.mass, g2 = b.force;\n                    f.x += m * (-g.x + g2.x);\n                    f.y += m * (-g.y + g2.y);\n                    f.z += m * (-g.z + g2.z);\n\n                    // Fix body position\n                    let d = body.position.distanceTo(parent.position);\n                    if (Math.abs(d - b.distanceToParent) > 0.01 && d > 0) {\n                        parent.position.lerp(body.position, b.distanceToParent / d, body.position);\n                    }\n\n                    // angularVelocity limitation\n                    let av = body.angularVelocity.length();\n                    if (av > avlimit) {\n                        body.angularVelocity.scale(avlimit / av, body.angularVelocity);\n                    }\n\n                    // apply spring(?) force.\n                    let approxInertia = b.size * b.size * m;\n                    let rot = body.quaternion.mult(parent.quaternion.inverse(_q0), _q1);\n                    let [axis, angle] = rot.toAxisAngle(_v0);\n                    angle = angle - Math.PI * 2 * Math.floor((angle + Math.PI) / (Math.PI * 2));\n                    let tf = angle * b.boneGroup.stiffiness * stiffnessScale; // stiff'i'ness\n                    if (Math.abs(tf) > Math.abs(angle / dt / dt * 0.5)) {\n                        tf = angle / dt / dt * 0.5;\n                    }\n                    let af = axis.scale(-tf * approxInertia, axis);\n                    body.torque.vadd(af, body.torque);\n                }\n            }\n        };\n    }\n    public attach(world: CANNON.World | null): void {\n        this.detach();\n        this.internalWorld = world == null;\n        this.world = world || new CANNON.World();\n        this.springBoneSystem.world = this.world;\n        this.world.subsystems.push(this.springBoneSystem);\n        this.bodies.forEach(b => this.world!.addBody(b));\n        this.constraints.forEach(c => this.world!.addConstraint(c));\n        this.reset();\n        this.enable = true;\n        // HACK: update collision mask.\n        this.world.bodies.forEach(b => {\n            if (b.collisionFilterGroup == 1 && b.collisionFilterMask == 1) {\n                b.collisionFilterMask = -1;\n            }\n        });\n    }\n    public detach(): void {\n        if (!this.world) {\n            return;\n        }\n        this.world.subsystems = this.world.subsystems.filter(s => s != this.springBoneSystem);\n        this.world.constraints = this.world.constraints.filter(c => !this.constraints.includes(c));\n        this.world.bodies = this.world.bodies.filter(b => !this.bodies.includes(b));\n        this.world = null;\n        this.enable = false;\n    }\n    public reset(): void {\n        this.fixedBinds.forEach(([node, body]) => {\n            node.updateWorldMatrix(true, false);\n            body.position.copy(node.getWorldPosition(this._tmpV0));\n            body.quaternion.copy(node.parent!.getWorldQuaternion(this._tmpQ0));\n        });\n        this.binds.forEach(([node, body]) => {\n            node.updateWorldMatrix(true, false);\n            body.position.copy(node.getWorldPosition(this._tmpV0));\n            body.quaternion.copy(node.getWorldQuaternion(this._tmpQ0));\n        });\n    }\n    public update(timeDelta: number): void {\n        if (!this.enable) {\n            return;\n        }\n        this.fixedBinds.forEach(([node, body]) => {\n            body.position.copy(node.getWorldPosition(this._tmpV0));\n            body.quaternion.copy(node.getWorldQuaternion(this._tmpQ0));\n        });\n        if (this.internalWorld) {\n            this.world!.step(1 / 60, timeDelta);\n        }\n        this.binds.forEach(([node, body]) => {\n            node.quaternion.copy(body.quaternion).premultiply(node.parent!.getWorldQuaternion(this._tmpQ0).invert());\n        });\n    }\n    public dispose(): void {\n        this.detach();\n    }\n}\n", "\nexport class IKNode {\n    position: THREE.Vector3;\n    constraint: { [key: string]: any };\n    userData: any;\n\n    quaternion = new THREE.Quaternion();\n    worldMatrix = new THREE.Matrix4();\n    worldPosition = new THREE.Vector3();\n\n    constructor(position: THREE.Vector3, constraint: { [key: string]: any }, userData: any) {\n        this.position = position;\n        this.constraint = constraint;\n        this.userData = userData;\n    }\n}\nexport class IKSolver {\n    iterationLimit = 50;\n    thresholdSq = 0.0001;\n    _iv = new THREE.Vector3(1, 1, 1);\n    _tmpV0 = new THREE.Vector3();\n    _tmpV1 = new THREE.Vector3();\n    _tmpV2 = new THREE.Vector3();\n    _tmpQ0 = new THREE.Quaternion();\n    _tmpQ1 = new THREE.Quaternion();\n\n    _updateChain(bones: IKNode[], parentMat: THREE.Matrix4) {\n        for (let bone of bones) {\n            bone.worldMatrix.compose(bone.position, bone.quaternion, this._iv).premultiply(parentMat);\n            bone.worldPosition.setFromMatrixPosition(bone.worldMatrix);\n            parentMat = bone.worldMatrix;\n        }\n    }\n    solve(bones: IKNode[], target: THREE.Vector3, boneSpaceMat: THREE.Matrix4) {\n        this._updateChain(bones, boneSpaceMat);\n        let endPosition = bones[bones.length - 1].worldPosition;\n        let startDistance = endPosition.distanceToSquared(target);\n        let targetDir = this._tmpV2;\n        let endDir = this._tmpV1;\n        let rotation = this._tmpQ1;\n        for (let i = 0; i < this.iterationLimit; i++) {\n            if (endPosition.distanceToSquared(target) < this.thresholdSq) {\n                break;\n            }\n            let currentTarget = this._tmpV0.copy(target);\n            for (let j = bones.length - 2; j >= 0; j--) {\n                let bone = bones[j];\n                let endPos = bones[j + 1].position;\n                bone.worldMatrix.decompose(this._tmpV1, this._tmpQ0, this._tmpV2);\n                targetDir.copy(currentTarget).sub(this._tmpV1).applyQuaternion(rotation.copy(this._tmpQ0).invert()).normalize();\n                endDir.copy(endPos).normalize();\n                rotation.setFromUnitVectors(endDir, targetDir);\n                bone.quaternion.multiply(rotation);\n                let v = endDir.copy(endPos).applyQuaternion(this._tmpQ0.multiply(rotation));\n                if (bone.constraint) {\n                    rotation.copy(bone.quaternion).invert();\n                    if (bone.constraint.apply(bone)) {\n                        // TODO\n                        rotation.premultiply(bone.quaternion);\n                        v.copy(endPos).applyQuaternion(this._tmpQ0.multiply(rotation));\n                    }\n                }\n                currentTarget.sub(v);\n            }\n            this._updateChain(bones, boneSpaceMat);\n        }\n        return endPosition.distanceToSquared(target) < startDistance;\n    }\n}\n\n\nexport class SimpleIK {\n    solver = new IKSolver();\n    chains: any[];\n    update(t : number) {\n\n    }\n}\n", "import { VRMAvatar } from \"../vrm/avatar\"\n\nexport class VMDLoaderWrapper {\n    boneMapping: { bone: string, nodeNames: string[] }[] = [\n        { \"bone\": \"hips\", \"nodeNames\": [\"\u30BB\u30F3\u30BF\u30FC\", \"center\"] },\n        { \"bone\": \"spine\", \"nodeNames\": [\"\u4E0A\u534A\u8EAB\", \"upper body\"] },\n        { \"bone\": \"chest\", \"nodeNames\": [\"\u4E0A\u534A\u8EAB2\", \"upper body2\"] },\n        { \"bone\": \"neck\", \"nodeNames\": [\"\u9996\", \"neck\"] },\n        { \"bone\": \"head\", \"nodeNames\": [\"\u982D\", \"head\"] },\n        { \"bone\": \"leftShoulder\", \"nodeNames\": [\"\u5DE6\u80A9\", \"shoulder_L\"] },\n        { \"bone\": \"leftUpperArm\", \"nodeNames\": [\"\u5DE6\u8155\", \"arm_L\"] },\n        { \"bone\": \"leftLowerArm\", \"nodeNames\": [\"\u5DE6\u3072\u3058\", \"elbow_L\"] },\n        { \"bone\": \"leftHand\", \"nodeNames\": [\"\u5DE6\u624B\u9996\", \"wrist_L\"] },\n        { \"bone\": \"rightShoulder\", \"nodeNames\": [\"\u53F3\u80A9\", \"shoulder_R\"] },\n        { \"bone\": \"rightUpperArm\", \"nodeNames\": [\"\u53F3\u8155\", \"arm_R\"] },\n        { \"bone\": \"rightLowerArm\", \"nodeNames\": [\"\u53F3\u3072\u3058\", \"elbow_R\"] },\n        { \"bone\": \"rightHand\", \"nodeNames\": [\"\u53F3\u624B\u9996\", \"wrist_R\"] },\n        { \"bone\": \"leftUpperLeg\", \"nodeNames\": [\"\u5DE6\u8DB3\", \"leg_L\"] },\n        { \"bone\": \"leftLowerLeg\", \"nodeNames\": [\"\u5DE6\u3072\u3056\", \"knee_L\"] },\n        { \"bone\": \"leftFoot\", \"nodeNames\": [\"\u5DE6\u8DB3\u9996\", \"ankle_L\"] },\n        { \"bone\": \"leftToes\", \"nodeNames\": [\"\u5DE6\u3064\u307E\u5148\", \"L toe\"] },\n        { \"bone\": \"rightUpperLeg\", \"nodeNames\": [\"\u53F3\u8DB3\", \"leg_R\"] },\n        { \"bone\": \"rightLowerLeg\", \"nodeNames\": [\"\u53F3\u3072\u3056\", \"knee_R\"] },\n        { \"bone\": \"rightFoot\", \"nodeNames\": [\"\u53F3\u8DB3\u9996\", \"ankle_R\"] },\n        { \"bone\": \"rightToes\", \"nodeNames\": [\"\u53F3\u3064\u307E\u5148\", \"R toe\"] },\n        { \"bone\": \"leftEye\", \"nodeNames\": [\"\u5DE6\u76EE\", \"eye_L\"] },\n        { \"bone\": \"rightEye\", \"nodeNames\": [\"\u53F3\u76EE\", \"eye_R\"] },\n        { \"bone\": \"leftThumbProximal\", \"nodeNames\": [\"\u5DE6\u89AA\u6307\uFF10\", \"thumb0_L\"] },\n        { \"bone\": \"leftThumbIntermediate\", \"nodeNames\": [\"\u5DE6\u89AA\u6307\uFF11\", \"thumb1_L\"] },\n        { \"bone\": \"leftThumbDistal\", \"nodeNames\": [\"\u5DE6\u89AA\u6307\uFF12\", \"thumb2_L\"] },\n        { \"bone\": \"leftIndexProximal\", \"nodeNames\": [\"\u5DE6\u4EBA\u6307\uFF11\", \"fore1_L\"] },\n        { \"bone\": \"leftIndexIntermediate\", \"nodeNames\": [\"\u5DE6\u4EBA\u6307\uFF12\", \"fore2_L\"] },\n        { \"bone\": \"leftIndexDistal\", \"nodeNames\": [\"\u5DE6\u4EBA\u6307\uFF13\", \"fore3_L\"] },\n        { \"bone\": \"leftMiddleProximal\", \"nodeNames\": [\"\u5DE6\u4E2D\u6307\uFF11\", \"middle1_L\"] },\n        { \"bone\": \"leftMiddleIntermediate\", \"nodeNames\": [\"\u5DE6\u4E2D\u6307\uFF12\", \"middle2_L\"] },\n        { \"bone\": \"leftMiddleDistal\", \"nodeNames\": [\"\u5DE6\u4E2D\u6307\uFF13\", \"middle3_L\"] },\n        { \"bone\": \"leftRingProximal\", \"nodeNames\": [\"\u5DE6\u85AC\u6307\uFF11\", \"third1_L\"] },\n        { \"bone\": \"leftRingIntermediate\", \"nodeNames\": [\"\u5DE6\u85AC\u6307\uFF12\", \"third2_L\"] },\n        { \"bone\": \"leftRingDistal\", \"nodeNames\": [\"\u5DE6\u85AC\u6307\uFF13\", \"third3_L\"] },\n        { \"bone\": \"leftLittleProximal\", \"nodeNames\": [\"\u5DE6\u5C0F\u6307\uFF11\", \"little1_L\"] },\n        { \"bone\": \"leftLittleIntermediate\", \"nodeNames\": [\"\u5DE6\u5C0F\u6307\uFF12\", \"little2_L\"] },\n        { \"bone\": \"leftLittleDistal\", \"nodeNames\": [\"\u5DE6\u5C0F\u6307\uFF13\", \"little3_L\"] },\n        { \"bone\": \"rightThumbProximal\", \"nodeNames\": [\"\u53F3\u89AA\u6307\uFF10\", \"thumb0_R\"] },\n        { \"bone\": \"rightThumbIntermediate\", \"nodeNames\": [\"\u53F3\u89AA\u6307\uFF11\", \"thumb1_R\"] },\n        { \"bone\": \"rightThumbDistal\", \"nodeNames\": [\"\u53F3\u89AA\u6307\uFF12\", \"thumb2_R\"] },\n        { \"bone\": \"rightIndexProximal\", \"nodeNames\": [\"\u53F3\u4EBA\u6307\uFF11\", \"fore1_R\"] },\n        { \"bone\": \"rightIndexIntermediate\", \"nodeNames\": [\"\u53F3\u4EBA\u6307\uFF12\", \"fore2_R\"] },\n        { \"bone\": \"rightIndexDistal\", \"nodeNames\": [\"\u53F3\u4EBA\u6307\uFF13\", \"fore3_R\"] },\n        { \"bone\": \"rightMiddleProximal\", \"nodeNames\": [\"\u53F3\u4E2D\u6307\uFF11\", \"middle1_R\"] },\n        { \"bone\": \"rightMiddleIntermediate\", \"nodeNames\": [\"\u53F3\u4E2D\u6307\uFF12\", \"middle2_R\"] },\n        { \"bone\": \"rightMiddleDistal\", \"nodeNames\": [\"\u53F3\u4E2D\u6307\uFF13\", \"middle3_R\"] },\n        { \"bone\": \"rightRingProximal\", \"nodeNames\": [\"\u53F3\u85AC\u6307\uFF11\", \"third1_R\"] },\n        { \"bone\": \"rightRingIntermediate\", \"nodeNames\": [\"\u53F3\u85AC\u6307\uFF12\", \"third2_R\"] },\n        { \"bone\": \"rightRingDistal\", \"nodeNames\": [\"\u53F3\u85AC\u6307\uFF13\", \"third3_R\"] },\n        { \"bone\": \"rightLittleProximal\", \"nodeNames\": [\"\u53F3\u5C0F\u6307\uFF11\", \"little1_R\"] },\n        { \"bone\": \"rightLittleIntermediate\", \"nodeNames\": [\"\u53F3\u5C0F\u6307\uFF12\", \"little2_R\"] },\n        { \"bone\": \"rightLittleDistal\", \"nodeNames\": [\"\u53F3\u5C0F\u6307\uFF13\", \"little3_R\"] },\n    ];\n    blendShapeMap = {\n        \"A\": \"\u3042\",\n        \"I\": \"\u3044\",\n        \"U\": \"\u3046\",\n        \"E\": \"\u3048\",\n        \"O\": \"\u304A\",\n        \"BLINK\": \"\u307E\u3070\u305F\u304D\",\n    };\n    rotationOffsets = {\n        \"leftUpperArm\": -38 * Math.PI / 180,\n        \"rightUpperArm\": 38 * Math.PI / 180,\n    };\n    ikConfigs = [\n        { target: \"\u5DE6\u8DB3\uFF29\uFF2B\", bones: [`leftFoot`, 'leftLowerLeg', 'leftUpperLeg'] },\n        { target: \"\u53F3\u8DB3\uFF29\uFF2B\", bones: [`rightFoot`, 'rightLowerLeg', 'rightUpperLeg'] },\n        { target: \"\u5DE6\u3064\u307E\u5148\uFF29\uFF2B\", parent: 0, bones: [`leftToes`, `leftFoot`] },\n        { target: \"\u53F3\u3064\u307E\u5148\uFF29\uFF2B\", parent: 1, bones: [`rightToes`, `rightFoot`] },\n    ];\n    boneConstraints: Record<string, any> = {\n        'leftLowerLeg': { min: new THREE.Vector3(-175 * Math.PI / 180, 0, 0), max: new THREE.Vector3(0, 0, 0) },\n        'rightLowerLeg': { min: new THREE.Vector3(-175 * Math.PI / 180, 0, 0), max: new THREE.Vector3(0, 0, 0) },\n        'leftUpperLeg': { min: new THREE.Vector3(-Math.PI / 2, -Math.PI / 2, -Math.PI / 2), max: new THREE.Vector3(Math.PI, Math.PI / 2, Math.PI / 2) },\n        'rightUpperLeg': { min: new THREE.Vector3(-Math.PI / 2, -Math.PI / 2, -Math.PI / 2), max: new THREE.Vector3(Math.PI, Math.PI / 2, Math.PI / 2) },\n    };\n\n    async load(url: string, vrm: VRMAvatar, options: any): Promise<THREE.AnimationClip> {\n        /** @ts-ignore */\n        let { MMDLoader } = await import('https://threejs.org/examples/jsm/loaders/MMDLoader.js');\n        /** @ts-ignore */\n        let { CCDIKSolver } = await import('https://threejs.org/examples/jsm/animation/CCDIKSolver.js');\n        let loader = new MMDLoader();\n\n        let nameMap: Record<string, string> = {};\n        for (let m of this.boneMapping) {\n            let boneObj = vrm.bones[m.bone];\n            if (boneObj) {\n                for (let name of m.nodeNames) {\n                    nameMap[name] = boneObj.name;\n                }\n            }\n        }\n        let rotationOffsets: Record<string, THREE.Quaternion> = {};\n        let boneTransforms: Record<string, [number, number]> = {};\n        for (let [name, r] of Object.entries(this.rotationOffsets)) {\n            let boneObj = vrm.bones[name];\n            if (boneObj) {\n                rotationOffsets[boneObj.name] = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(0, 0, 1), r);\n                boneObj.traverse(o => {\n                    boneTransforms[o.name] = [Math.cos(r), Math.sin(r)]; // TODO matrix\n                });\n            }\n        }\n        let morphTargetDictionary: Record<string, string> = {};\n        for (let [name, morph] of Object.entries(this.blendShapeMap)) {\n            let b = vrm.blendShapes[name];\n            if (b) {\n                morphTargetDictionary[morph] = name;\n            }\n        }\n\n        /** @ts-ignore */\n        vrm.model.morphTargetDictionary = morphTargetDictionary;\n        let scale = 0.08; // MMD unit: 8cm\n        let rotY = (p: number[], t: number[]) => {\n            [p[0], p[2]] = [\n                p[0] * t[0] - p[2] * t[1],\n                p[0] * t[1] + p[2] * t[0]\n            ];\n        };\n        let rotZ = (p: number[], t: number[]) => {\n            [p[0], p[1]] = [\n                p[0] * t[0] - p[1] * t[1],\n                p[0] * t[1] + p[1] * t[0]\n            ];\n        };\n        let rot = new THREE.Quaternion();\n        let rot2 = new THREE.Quaternion();\n        return await new Promise((resolve, reject) => {\n            loader.loadVMD(url, async (vmd: { motions: any[] }) => {\n                // Cancel lower body rotation\n                let lowerBody = vmd.motions.filter(m => m.boneName == \"\u4E0B\u534A\u8EAB\");\n                if (lowerBody.length) {\n                    lowerBody.sort((a, b) => a.frameNum - b.frameNum);\n                    let update = (target: any[], inv: boolean) => {\n                        target.sort((a, b) => a.frameNum - b.frameNum);\n                        let i = 0;\n                        for (let m of target) {\n                            while (i < lowerBody.length - 1 && m.frameNum > lowerBody[i].frameNum) {\n                                i++;\n                            }\n                            let r = rot2.fromArray(lowerBody[i].rotation);\n                            if (i > 0 && m.frameNum < lowerBody[i].frameNum) {\n                                let t = (m.frameNum - lowerBody[i - 1].frameNum) / (lowerBody[i].frameNum - lowerBody[i - 1].frameNum);\n                                // TOOD: bezier interpolation.\n                                r.slerp(rot.fromArray(lowerBody[i - 1].rotation), 1 - t);\n                            }\n                            if (inv) {\n                                // r.invert();\n                                r.x *= -1;\n                                r.y *= -1;\n                                r.z *= -1;\n                            }\n                            m.rotation = rot.fromArray(m.rotation).multiply(r).toArray();\n                        }\n                    };\n                    update(vmd.motions.filter(m => m.boneName == \"\u30BB\u30F3\u30BF\u30FC\"), false);\n                    update(vmd.motions.filter(m => m.boneName == \"\u4E0A\u534A\u8EAB\"), true);\n                    lowerBody.forEach(m => m.rotation = [0, 0, 0, 1]);\n                }\n                // convert bones\n                for (let m of vmd.motions) {\n                    if (nameMap[m.boneName]) {\n                        m.boneName = nameMap[m.boneName];\n                    }\n                    let r = rotationOffsets[m.boneName];\n                    if (r) {\n                        m.rotation = rot.fromArray(m.rotation).premultiply(r).toArray();\n                    }\n                    m.position[0] *= scale;\n                    m.position[1] *= scale;\n                    m.position[2] *= scale;\n                    rotY(m.position, [-1, 0]);\n                    rotY(m.rotation, [-1, 0]);\n                    let t = boneTransforms[m.boneName];\n                    if (t) {\n                        rotZ(m.position, t);\n                        rotZ(m.rotation, t);\n                    }\n                }\n\n                if (options.enableIK) {\n                    /** @type {THREE.Bone[]} */\n                    // @ts-ignore\n                    let skeletonBones = vrm.model.skeleton.bones as any[];\n                    let getTargetBone = (config: { target: string, parent?: any, bones: any[] }) => {\n                        let targetIndex = skeletonBones.findIndex(b => b.name == config.target);\n                        if (targetIndex >= 0) {\n                            return targetIndex;\n                        }\n                        let parentObj = config.parent != null ? skeletonBones[getTargetBone(this.ikConfigs[config.parent])] : vrm.model;\n                        let dummyBone = new THREE.Bone();\n                        dummyBone.name = config.target;\n                        skeletonBones.push(dummyBone);\n                        parentObj.add(dummyBone);\n                        parentObj.updateMatrixWorld();\n                        let initPos = vrm.bones[config.bones[0]].getWorldPosition(new THREE.Vector3());\n                        let cloned = parentObj.matrixWorld.clone();\n                        cloned.x *= -1;\n                        cloned.y *= -1;\n                        cloned.z *= -1;\n                        dummyBone.position.copy(initPos.applyMatrix4(cloned));\n\n                        // DEBUG\n                        //let geometry = new THREE.BoxGeometry(0.01, 0.01, 0.01);\n                        //let material = new THREE.MeshBasicMaterial({\n                        //\tcolor: new THREE.Color(\"red\"),\n                        //\ttransparent: true, opacity: 0.4, depthTest: false,\n                        //});\n                        //dummyBone.add(new THREE.Mesh(geometry, material));\n                        return skeletonBones.length - 1;\n                    }\n                    let iks = [];\n                    for (let config of this.ikConfigs) {\n                        // TODO: IK on/off setting from vmd.\n                        if (vmd.motions.find(m => m.boneName == config.target) == undefined) {\n                            continue;\n                        }\n                        let boneIndex = (name: string) => skeletonBones.findIndex(b => b == vrm.bones[name]);\n                        let effectorIndex = boneIndex(config.bones[0]);\n                        if (effectorIndex < 0) {\n                            continue;\n                        }\n                        let links: any[] = [];\n                        config.bones.slice(1).forEach(name => {\n                            let index = boneIndex(name);\n                            if (index >= 0) {\n                                let link: { index: number, rotationMax?: any, rotationMin?: any } = { index: index };\n                                let constraint = this.boneConstraints[name];\n                                if (constraint) {\n                                    link.rotationMax = constraint.max;\n                                    link.rotationMin = constraint.min;\n                                }\n                                links.push(link);\n                            }\n                        });\n                        let ik = {\n                            target: getTargetBone(config),\n                            effector: effectorIndex,\n                            links: links,\n                            maxAngle: 1,\n                            iteration: 4,\n                        };\n                        iks.push(ik);\n                    }\n                    if (iks.length > 0) {\n                        console.log(iks);\n                        let ikSolver = new CCDIKSolver(vrm.model, iks);\n                        vrm.setModule('MMDIK', { update: (t) => ikSolver.update() });\n                    }\n                }\n\n                let clip = loader.animationBuilder.build(vmd, vrm.model) as THREE.AnimationClip;\n                clip.tracks.forEach(tr => {\n                    let m = tr.name.match(/.morphTargetInfluences\\[(\\w+)\\]/);\n                    if (m) {\n                        let b = vrm.blendShapes[m[1]];\n                        if (b && b.binds.length > 0) {\n                            // todo clone track.\n                            tr.name = b.binds[0].target.uuid + \".morphTargetInfluences[\" + b.binds[0].index + \"]\";\n                        }\n                    }\n                });\n                resolve(clip);\n            }, () => { }, reject);\n        });\n    }\n}\n", "import { VRMAvatar } from '../vrm/avatar';\n\nexport class BVHLoaderWrapper {\n    public async load(url: string, avatar: VRMAvatar, options: any): Promise<THREE.AnimationClip> {\n        /** @ts-ignore */\n        let { BVHLoader } = await import('https://threejs.org/examples/jsm/loaders/BVHLoader.js');\n        return await new Promise((resolve, reject) => {\n            new BVHLoader().load(url, (result: any) => {\n                if (options.convertBone) {\n                    this.fixTrackName(result.clip, avatar);\n                }\n                result.clip.tracks = result.clip.tracks.filter((t: any) => !t.name.match(/position/) || t.name.match(avatar.bones.hips.name));\n                resolve(result.clip);\n            });\n        });\n    }\n\n    protected convertBoneName(name: string): string {\n        name = name.replace('Spin1', 'Spin');\n        name = name.replace('Chest1', 'Chest');\n        name = name.replace('Chest2', 'UpperChest');\n        name = name.replace('UpLeg', 'UpperLeg');\n        name = name.replace('LeftLeg', 'LeftLowerLeg');\n        name = name.replace('RightLeg', 'RightLowerLeg');\n        name = name.replace('ForeArm', 'UpperArm');\n        name = name.replace('LeftArm', 'LeftLowerArm');\n        name = name.replace('RightArm', 'RightLowerArm');\n        name = name.replace('Collar', 'Shoulder');\n        name = name.replace('Elbow', 'LowerArm');\n        name = name.replace('Wrist', 'Hand');\n        name = name.replace('LeftHip', 'LeftUpperLeg');\n        name = name.replace('RightHip', 'RightUpperLeg');\n        name = name.replace('Knee', 'LowerLeg');\n        name = name.replace('Ankle', 'Foot');\n        return name.charAt(0).toLowerCase() + name.slice(1);\n    }\n\n    protected fixTrackName(clip: THREE.AnimationClip, avatar: VRMAvatar): void {\n        clip.tracks.forEach(t => {\n            // '.bones[Chest].quaternion'\n            t.name = t.name.replace(/bones\\[(\\w+)\\]/, (m, name) => {\n                let bone = avatar.bones[this.convertBoneName(name)];\n                return 'bones[' + (bone != null ? bone.name : 'NODE_NOT_FOUND') + ']';\n            });\n            t.name = t.name.replace('ToeBase', 'Foot');\n            if (t.name.match(/quaternion/)) {\n                t.values = t.values.map((v, i) => i % 2 === 0 ? -v : v);\n            }\n            if (t.name.match(/position/)) {\n                t.values = t.values.map((v, i) => (i % 3 === 1 ? v : -v) * 0.09); // TODO\n            }\n        });\n        clip.tracks = clip.tracks.filter(t => !t.name.match(/NODE_NOT_FOUND/));\n    }\n}\n", "// @ts-nocheck\nimport { VRMAvatar, VRMLoader } from \"./vrm/avatar\";\nimport { VRMPhysicsCannonJS } from \"./utils/physics-cannon\";\nimport { IKNode, IKSolver } from \"./utils/simpleik\";\nimport { VMDLoaderWrapper } from \"./utils/vmd\";\nimport { BVHLoaderWrapper } from \"./utils/bvh\";\n\nAFRAME.registerComponent('vrm', {\n    schema: {\n        src: { default: '' },\n        firstPerson: { default: false },\n        blink: { default: true },\n        blinkInterval: { default: 5 },\n        lookAt: { type: 'selector' },\n        enablePhysics: { default: false },\n    },\n    init() {\n        this.avatar = null;\n    },\n    update(oldData) {\n        if (this.data.src !== oldData.src) {\n            this.remove();\n            this._loadAvatar();\n        }\n        this._updateAvatar();\n    },\n    tick(time, timeDelta) {\n        if (!this.avatar) {\n            this.pause();\n            return;\n        }\n        this.avatar.update(timeDelta / 1000);\n    },\n    remove() {\n        if (this.avatar) {\n            this.el.removeObject3D('avatar');\n            this.avatar.dispose();\n        }\n    },\n    async _loadAvatar() {\n        let el = this.el;\n        let url = this.data.src;\n        if (!url) {\n            return;\n        }\n        try {\n            let moduleSpecs = [];\n            if (globalThis.CANNON) {\n                moduleSpecs.push({ name: 'physics', instantiate: (a, ctx) => new VRMPhysicsCannonJS(ctx) });\n            }\n            let avatar = await new VRMLoader().load(url, moduleSpecs);\n            if (url != this.data.src) {\n                avatar.dispose();\n                return;\n            }\n            this.avatar = avatar;\n            el.setObject3D('avatar', avatar.model);\n            this._updateAvatar();\n            this.play();\n            el.emit('model-loaded', { format: 'vrm', model: avatar.model, avatar: avatar }, false);\n        } catch (e) {\n            el.emit('model-error', { format: 'vrm', src: url, cause: e }, false);\n        }\n    },\n    _updateAvatar() {\n        if (!this.avatar) {\n            return;\n        }\n        let data = this.data;\n        this.avatar.setFirstPerson(data.firstPerson);\n        if (data.lookAt) {\n            if (data.lookAt.tagName == 'A-CAMERA') {\n                this.avatar.lookAtTarget = this.el.sceneEl.camera;\n            } else {\n                this.avatar.lookAtTarget = data.lookAt.object3D;\n            }\n        } else {\n            this.avatar.lookAtTarget = null;\n        }\n        if (data.blink) {\n            this.avatar.startBlink(data.blinkInterval);\n        } else {\n            this.avatar.stopBlink();\n        }\n        /** @type {VRMPhysicsCannonJS} */\n        let physics = this.avatar.modules.physics;\n        if (physics) {\n            if (data.enablePhysics && physics.world == null) {\n                let engine = this.el.sceneEl.systems.physics;\n                // @ts-ignore\n                physics.attach(engine && engine.driver && engine.driver.world);\n            }\n            physics.enable = data.enablePhysics;\n        }\n    }\n});\n\nAFRAME.registerComponent('vrm-anim', {\n    schema: {\n        src: { default: '' },\n        format: { default: '' },\n        loop: { default: true },\n        enableIK: { default: true },\n        convertBone: { default: true },\n    },\n    init() {\n        /** @type {VRMAvatar} */\n        this.avatar = null;\n        if (this.el.components.vrm && this.el.components.vrm.avatar) {\n            this.avatar = this.el.components.vrm.avatar;\n        }\n        this.onVrmLoaded = (ev) => {\n            this.avatar = ev.detail.avatar;\n            if (this.data.src != '') {\n                this._loadClip(this.data.src);\n            } else if (this.avatar.animations.length > 0) {\n                this.playClip(this.avatar.animations[0]);\n            } else {\n                this.playTestMotion();\n            }\n        };\n        this.el.addEventListener('model-loaded', this.onVrmLoaded);\n    },\n    update(oldData) {\n        if (oldData.src != this.data.src && this.avatar) {\n            this._loadClip(this.data.src);\n        }\n    },\n    /**\n     * \n     * @param {string} url \n     * @returns \n     */\n    async _loadClip(url) {\n        console.log(`Animation URL is ${url}`)\n        this.stopAnimation();\n        this.avatar.restPose();\n        if (url === '') {\n            return;\n        }\n        let loop = this.data.loop ? THREE.LoopRepeat : THREE.LoopOnce;\n        let format = this.data.format || (url.toLowerCase().endsWith('.bvh') ? 'bvh' : '');\n        let loader = format == 'bvh' ? new BVHLoaderWrapper() : new VMDLoaderWrapper()\n        if (url.startsWith(\"/\"))\n        {\n            // \u76F8\u5BFE\u30D1\u30B9\n            url = \"./\" + url;\n        }\n        let clip = await loader.load(url, this.avatar, this.data);\n        if (!this.avatar) {\n            return;\n        }\n        this.playClip(clip);\n    },\n    stopAnimation() {\n        if (this.animation) {\n            this.animation.stop();\n            this.avatar.mixer.uncacheClip(this.clip);\n            this.avatar.removeModule('MMDIK');\n            this.animation = null;\n        }\n    },\n    playTestMotion() {\n        let q = (x, y, z) => new THREE.Quaternion().setFromEuler(new THREE.Euler(x * Math.PI / 180, y * Math.PI / 180, z * Math.PI / 180));\n        let tracks = {\n            leftUpperArm: {\n                keys: [\n                    { rot: q(0, 0, 65), time: 0 },\n                    { rot: q(0, 0, 63), time: 1 },\n                    { rot: q(0, 0, 65), time: 2 },\n                ]\n            },\n            rightUpperArm: {\n                keys: [\n                    { rot: q(0, 0, -65), time: 0 },\n                    { rot: q(0, 0, -60), time: 1 },\n                    { rot: q(0, 0, -65), time: 2 },\n                ]\n            },\n            spine: {\n                keys: [\n                    { rot: q(0, 2, 0), time: 0 },\n                    { rot: q(2, 0, -2), time: 1 },\n                    { rot: q(2, -2, 0), time: 2 },\n                    { rot: q(0, 0, 2), time: 3 },\n                    { rot: q(0, 2, 0), time: 4 },\n                ]\n            }\n        };\n        let clip = THREE.AnimationClip.parseAnimation(\n            {\n                name: 'testAnimation',\n                hierarchy: Object.values(tracks),\n            },\n            Object.keys(tracks).map(k => this.avatar.bones[k] || { name: k })\n        );\n        this.playClip(clip);\n    },\n    playClip(clip) {\n        let loop = this.data.loop ? THREE.LoopRepeat : THREE.LoopOnce;\n        this.stopAnimation();\n        this.clip = clip;\n        this.avatar.mixer.setTime(0);\n        this.animation = this.avatar.mixer.clipAction(clip).setLoop(loop).setEffectiveWeight(1.0).play();\n        this.animation.clampWhenFinished = true;\n    },\n    remove() {\n        this.el.removeEventListener('model-loaded', this.onVrmLoaded);\n        this.stopAnimation();\n        this.avatar = null;\n    }\n});\n\nAFRAME.registerComponent('vrm-skeleton', {\n    schema: {\n        physicsOffset: { type: 'vec3', default: { x: 0, y: 0, z: 0 } },\n    },\n    init() {\n        this.physicsBodies = [];\n        this.sceneObj = this.el.sceneEl.object3D;\n        if (this.el.components.vrm && this.el.components.vrm.avatar) {\n            this._onAvatarUpdated(this.el.components.vrm.avatar);\n        }\n        this.onVrmLoaded = (ev) => this._onAvatarUpdated(ev.detail.avatar);\n        this.el.addEventListener('model-loaded', this.onVrmLoaded);\n    },\n    _onAvatarUpdated(avatar) {\n        if (this.helper) {\n            this.sceneObj.remove(this.helper);\n        }\n        this.helper = new THREE.SkeletonHelper(avatar.model);\n        this.sceneObj.add(this.helper);\n        this._updatePhysicsBody(avatar);\n    },\n    _updatePhysicsBody(avatar) {\n        this._clearPhysicsBody();\n        /** @type {VRMPhysicsCannonJS} */\n        let physics = avatar.modules.physics;\n        if (!physics || !physics.world) {\n            return;\n        }\n        let geometry = new THREE.SphereGeometry(1, 6, 3);\n        let material = new THREE.MeshBasicMaterial({ color: new THREE.Color(\"red\"), wireframe: true, depthTest: false });\n        physics.bodies.forEach(body => {\n            let obj = new THREE.Group();\n            body.shapes.forEach((shape, i) => {\n                let sphere = new THREE.Mesh(geometry, material);\n                sphere.position.copy(body.shapeOffsets[i]);\n                sphere.scale.multiplyScalar(shape.boundingSphereRadius || 0.01);\n                obj.add(sphere);\n\n            });\n            this.sceneObj.add(obj);\n            this.physicsBodies.push([body, obj]);\n        });\n    },\n    _clearPhysicsBody() {\n        this.physicsBodies.forEach(([body, obj]) => obj.parent.remove(obj));\n        this.physicsBodies = [];\n    },\n    tick() {\n        this.physicsBodies.forEach(([body, obj]) => {\n            obj.position.copy(body.position).add(this.data.physicsOffset);\n            obj.quaternion.copy(body.quaternion);\n        });\n    },\n    remove() {\n        this.el.removeEventListener('model-loaded', this.onVrmLoaded);\n        this._clearPhysicsBody();\n        if (this.helper) {\n            this.sceneObj.remove(this.helper);\n        }\n    }\n});\n\nAFRAME.registerComponent('vrm-poser', {\n    schema: {\n        color: { default: '#00ff00' },\n        enableConstraints: { default: true },\n    },\n    init() {\n        this.binds = [];\n        this._tmpV0 = new THREE.Vector3();\n        this._tmpV1 = new THREE.Vector3();\n        this._tmpQ0 = new THREE.Quaternion();\n        this._tmpQ1 = new THREE.Quaternion();\n        this._tmpM0 = new THREE.Matrix4();\n        if (this.el.components.vrm && this.el.components.vrm.avatar) {\n            this._onAvatarUpdated(this.el.components.vrm.avatar);\n        }\n        this.onVrmLoaded = (ev) => this._onAvatarUpdated(ev.detail.avatar);\n        this.el.addEventListener('model-loaded', this.onVrmLoaded);\n    },\n    remove() {\n        this.el.removeEventListener('model-loaded', this.onVrmLoaded);\n        this._removeHandles();\n    },\n    getPoseData(exportMorph) {\n        if (!this.avatar) {\n            return;\n        }\n        return this.avatar.getPose(exportMorph);\n    },\n    setPoseData(pose) {\n        if (!this.avatar) {\n            return;\n        }\n        this.avatar.setPose(pose);\n        this._updateHandlePosition();\n    },\n    _onAvatarUpdated(avatar) {\n        this._removeHandles();\n        this.avatar = avatar;\n        let geometry = new THREE.BoxGeometry(1, 1, 1);\n        let material = new THREE.MeshBasicMaterial({\n            color: new THREE.Color(this.data.color),\n            transparent: true, opacity: 0.4, depthTest: false,\n        });\n        let _v0 = this._tmpV0, _v1 = this._tmpV1, _m = this._tmpM0, _q = this._tmpQ0;\n        let rootNode = avatar.bones['hips'];\n        let boneNameByUUID = {};\n        for (let name of Object.keys(avatar.bones)) {\n            let bone = avatar.bones[name];\n            let isRoot = bone == rootNode;\n            let cube = new THREE.Mesh(geometry, material);\n            let targetEl = document.createElement('a-entity');\n            targetEl.classList.add('collidable');\n            targetEl.setAttribute('xy-drag-control', {});\n            targetEl.setObject3D('handle', cube);\n            let targetObject = targetEl.object3D;\n            let minDist = bone.children.reduce((d, b) => Math.min(d, b.position.length()), bone.position.length());\n            targetObject.scale.multiplyScalar(Math.max(Math.min(minDist / 2, 0.05), 0.01));\n            boneNameByUUID[bone.uuid] = name;\n            targetEl.addEventListener('mousedown', ev => {\n                this.el.emit('vrm-poser-select', { name: name, node: bone });\n            });\n            let parentBone = bone.parent;\n            while (!boneNameByUUID[parentBone.uuid] && parentBone.parent && parentBone.parent.isBone) {\n                parentBone = parentBone.parent;\n            }\n            targetEl.addEventListener('xy-drag', ev => {\n                if (isRoot) {\n                    // TODO\n                    let d = targetObject.parent.worldToLocal(bone.getWorldPosition(_v0)).sub(targetObject.position)\n                    avatar.model.position.sub(d);\n                }\n                parentBone.updateMatrixWorld(false);\n                targetObject.updateMatrixWorld(false);\n                _m.getInverse(parentBone.matrixWorld).multiply(targetObject.matrixWorld).decompose(_v1, _q, _v0);\n                bone.quaternion.copy(this._applyConstraintQ(name, _q));\n                _q.setFromUnitVectors(_v0.copy(bone.position).normalize(), _v1.normalize());\n                if (parentBone.children.length == 1) {\n                    parentBone.quaternion.multiply(_q);\n                    this._applyConstraintQ(boneNameByUUID[parentBone.uuid], parentBone.quaternion)\n                }\n                this._updateHandlePosition(isRoot ? null : bone);\n            });\n            targetEl.addEventListener('xy-dragend', ev => {\n                this._updateHandlePosition();\n                console.log(parentBone.name, name);\n            });\n            this.el.appendChild(targetEl);\n            this.binds.push([bone, targetObject]);\n        }\n        this._updateHandlePosition();\n    },\n    _applyConstraintQ(name, q) {\n        if (!this.data.enableConstraints) {\n            return q;\n        }\n        let _q = this._tmpQ1, _v = this._tmpV0;\n        let constraint = this.avatar.boneConstraints[name];\n        if (constraint && constraint.type == 'ball') {\n            let angle = 2 * Math.acos(q.w);\n            if (constraint.twistAxis) {\n                let tangle = angle * Math.acos(q.w) * _v.copy(q).normalize().dot(constraint.twistAxis); // TODO\n                tangle = this._normalizeAngle(tangle);\n                if (Math.abs(tangle) > constraint.twistLimit) {\n                    let e = tangle < 0 ? (tangle + constraint.twistLimit) : (tangle - constraint.twistLimit);\n                    q.multiply(_q.setFromAxisAngle(constraint.twistAxis, -e));\n                    angle = 2 * Math.acos(q.w);\n                }\n            }\n            if (Math.abs(this._normalizeAngle(angle)) > constraint.limit) {\n                q.setFromAxisAngle(_v.copy(q).normalize(), constraint.limit);\n            }\n        } else if (constraint && constraint.type == 'hinge') {\n            let m = (constraint.min + constraint.max) / 2;\n            let angle = 2 * Math.acos(q.w) * _v.copy(q).normalize().dot(constraint.axis); // TODO\n            angle = THREE.MathUtils.clamp(this._normalizeAngle(angle - m), constraint.min - m, constraint.max - m);\n            q.setFromAxisAngle(constraint.axis, angle + m);\n        }\n        return q;\n    },\n    _normalizeAngle(angle) {\n        return angle - Math.PI * 2 * Math.floor((angle + Math.PI) / (Math.PI * 2));\n    },\n    _removeHandles() {\n        this.binds.forEach(([b, t]) => {\n            this.el.removeChild(t.el);\n            let obj = t.el.getObject3D('handle');\n            if (obj) {\n                obj.material.dispose();\n                obj.geometry.dispose();\n            }\n            t.el.destroy();\n        });\n        this.binds = [];\n    },\n    _updateHandlePosition(skipNode) {\n        let _v = this._tmpV0;\n        let container = this.el.object3D;\n        container.updateMatrixWorld(false);\n        let base = container.matrixWorld.clone().invert();\n        this.binds.forEach(([node, target]) => {\n            let pos = node == skipNode ? _v : target.position;\n            node.updateMatrixWorld(false);\n            target.matrix.copy(node.matrixWorld).premultiply(base).decompose(pos, target.quaternion, _v);\n        });\n    }\n});\n\nAFRAME.registerComponent('vrm-mimic', {\n    schema: {\n        leftHandTarget: { type: 'selector', default: '' },\n        leftHandOffsetPosition: { type: 'vec3' },\n        leftHandOffsetRotation: { type: 'vec3', default: { x: 0, y: -Math.PI / 2, z: 0 } },\n        rightHandTarget: { type: 'selector', default: '' },\n        rightHandOffsetPosition: { type: 'vec3' },\n        rightHandOffsetRotation: { type: 'vec3', default: { x: 0, y: Math.PI / 2, z: 0 } },\n        leftLegTarget: { type: 'selector', default: '' },\n        rightLegTarget: { type: 'selector', default: '' },\n        headTarget: { type: 'selector', default: '' },\n        avatarOffset: { type: 'vec3', default: { x: 0, y: 0, z: 0 } },\n    },\n    init() {\n        this._tmpV0 = new THREE.Vector3();\n        this._tmpV1 = new THREE.Vector3();\n        this._tmpQ0 = new THREE.Quaternion();\n        this._tmpQ1 = new THREE.Quaternion();\n        this._tmpM0 = new THREE.Matrix4();\n        this.targetEls = [];\n        if (this.el.components.vrm && this.el.components.vrm.avatar) {\n            this._onAvatarUpdated(this.el.components.vrm.avatar);\n        }\n        this.onVrmLoaded = (ev) => this._onAvatarUpdated(ev.detail.avatar);\n        this.el.addEventListener('model-loaded', this.onVrmLoaded);\n    },\n    update() {\n        if (this.data.headTarget) {\n            if (this.data.headTarget.tagName == 'A-CAMERA') {\n                this.headTarget = this.el.sceneEl.camera;\n            } else {\n                this.headTarget = this.data.headTarget.object3D;\n            }\n        } else {\n            this.headTarget = null;\n        }\n\n        this.rightHandOffset = new THREE.Matrix4().compose(\n            this.data.rightHandOffsetPosition,\n            new THREE.Quaternion().setFromEuler(new THREE.Euler().setFromVector3(this.data.rightHandOffsetRotation)),\n            new THREE.Vector3(1, 1, 1));\n        this.leftHandOffset = new THREE.Matrix4().compose(\n            this.data.leftHandOffsetPosition,\n            new THREE.Quaternion().setFromEuler(new THREE.Euler().setFromVector3(this.data.leftHandOffsetRotation)),\n            new THREE.Vector3(1, 1, 1));\n    },\n    _onAvatarUpdated(avatar) {\n        this.avatar = avatar;\n        for (let el of this.targetEls) {\n            this.el.removeChild(el);\n        }\n        this.targetEls = [];\n        this.update();\n        this.startAvatarIK_simpleIK(avatar);\n    },\n    startAvatarIK_simpleIK(avatar) {\n        let solver = new IKSolver();\n        this.qbinds = [];\n        let setupIkChain = (boneNames, targetEl, offset) => {\n            if (targetEl == null) {\n                targetEl = document.createElement('a-box');\n                targetEl.classList.add('collidable');\n                targetEl.setAttribute('xy-drag-control', {});\n                targetEl.setAttribute('geometry', { width: 0.05, depth: 0.05, height: 0.05 });\n                targetEl.setAttribute('material', { color: 'blue', depthTest: false, transparent: true, opacity: 0.4 });\n                this.el.appendChild(targetEl);\n                this.targetEls.push(targetEl);\n            }\n            let pos = (b, p) => p.worldToLocal(b.getWorldPosition(new THREE.Vector3()));\n            boneNames = boneNames.filter(name => avatar.bones[name]);\n            let boneList = boneNames.map(name => avatar.bones[name]);\n            let bones = boneList.map((b, i) => {\n                let position = i == 0 ? b.position : pos(b, boneList[i - 1]);\n                let constraintConf = avatar.boneConstraints[boneNames[i]];\n                let constraint = constraintConf ? {\n                    apply: ikbone => {\n                        return this._applyConstraintQ(constraintConf, ikbone.quaternion);\n                    }\n                } : null;\n                return new IKNode(position, constraint, b);\n            });\n            this.qbinds.push([boneList[boneList.length - 1], targetEl.object3D, offset]);\n            return { root: boneList[0], ikbones: bones, bones: boneList, target: targetEl.object3D };\n        };\n\n        this.chains = [\n            setupIkChain(['leftUpperArm', 'leftLowerArm', 'leftHand'], this.data.leftHandTarget, this.leftHandOffset),\n            setupIkChain(['rightUpperArm', 'rightLowerArm', 'rightHand'], this.data.rightHandTarget, this.rightHandOffset),\n            setupIkChain(['leftUpperLeg', 'leftLowerLeg', 'leftFoot'], this.data.leftLegTarget),\n            setupIkChain(['rightUpperLeg', 'rightLowerLeg', 'rightFoot'], this.data.rightLegTarget),\n        ];\n\n        this.simpleIK = solver;\n    },\n    _applyConstraintQ(constraint, q) {\n        let _q = this._tmpQ1, _v = this._tmpV0, fixed = false;;\n        if (constraint && constraint.type == 'ball') {\n            let angle = 2 * Math.acos(q.w);\n            if (constraint.twistAxis) {\n                let tangle = angle * Math.acos(q.w) * _v.copy(q).normalize().dot(constraint.twistAxis); // TODO\n                tangle = this._normalizeAngle(tangle);\n                if (Math.abs(tangle) > constraint.twistLimit) {\n                    let e = tangle < 0 ? (tangle + constraint.twistLimit) : (tangle - constraint.twistLimit);\n                    q.multiply(_q.setFromAxisAngle(constraint.twistAxis, -e));\n                    angle = 2 * Math.acos(q.w);\n                    fixed = true;\n                }\n            }\n            if (Math.abs(this._normalizeAngle(angle)) > constraint.limit) {\n                q.setFromAxisAngle(_v.copy(q).normalize(), constraint.limit);\n                fixed = true;\n            }\n        } else if (constraint && constraint.type == 'hinge') {\n            let m = (constraint.min + constraint.max) / 2;\n            let dot = _v.copy(q).normalize().dot(constraint.axis);\n            let angle = 2 * Math.acos(q.w) * dot; // TODO\n            angle = THREE.MathUtils.clamp(this._normalizeAngle(angle - m), constraint.min - m, constraint.max - m);\n            q.setFromAxisAngle(constraint.axis, angle + m);\n            fixed = true;\n        }\n        return fixed;\n    },\n    _normalizeAngle(angle) {\n        return angle - Math.PI * 2 * Math.floor((angle + Math.PI) / (Math.PI * 2));\n    },\n    tick(time, timeDelta) {\n        if (!this.avatar) {\n            return;\n        }\n        if (this.headTarget) {\n            let position = this._tmpV0;\n            let headRot = this._tmpQ0;\n            this.headTarget.matrixWorld.decompose(position, headRot, this._tmpV1)\n            position.y = 0;\n            this.avatar.model.position.copy(position.add(this.data.avatarOffset));\n            let head = this.avatar.firstPersonBone;\n            if (head) {\n                let r = this._tmpQ1.setFromRotationMatrix(head.parent.matrixWorld).invert();\n                head.quaternion.copy(headRot.premultiply(r));\n            }\n        }\n        if (this.simpleIK) {\n            let pm = this.el.object3D.matrixWorld.clone().invert();\n            for (let chain of this.chains) {\n                // TODO: add chain.root.position\n                let baseMat = chain.root.parent.matrixWorld.clone().premultiply(pm);\n                if (this.simpleIK.solve(chain.ikbones, chain.target.position, baseMat) || true) {\n                    chain.ikbones.forEach((ikbone, i) => {\n                        if (i == chain.ikbones.length - 1) return;\n                        let a = ikbone.userData.quaternion.angleTo(ikbone.quaternion);\n                        if (a > 0.2) {\n                            ikbone.userData.quaternion.slerp(ikbone.quaternion, 0.2 / a);\n                        } else {\n                            ikbone.userData.quaternion.copy(ikbone.quaternion);\n                        }\n                    });\n\n                }\n            }\n            this.qbinds.forEach(([bone, t, offset]) => {\n                let m = offset ? t.matrixWorld.clone().multiply(offset) : t.matrixWorld;\n                let r = this._tmpQ0.setFromRotationMatrix(bone.parent.matrixWorld).invert();\n                bone.quaternion.copy(this._tmpQ1.setFromRotationMatrix(m).premultiply(r));\n            });\n        }\n    },\n    remove() {\n        this.el.removeEventListener('model-loaded', this.onVrmLoaded);\n        for (let el of this.targetEls) {\n            this.el.removeChild(el);\n        }\n    }\n});\n"],
  "mappings": "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",
  "names": []
}
